using System;
using System.Linq;
using System.Numerics;
using System.Collections.Generic;
​
public class AnagramSumSolution
{
    public static int SumOfDigitGroups(BigInteger[] numbers)
    {
        
        string[] strNumbers = new string[numbers.Length];
        Dictionary<string, int> dict = new Dictionary<string, int>();
        List<List<string>> groups = new List<List<string>>();
        for (int i = 0; i < numbers.Length; i++)
        {
            strNumbers[i] = numbers[i].ToString();
        }
​
        foreach(string str in strNumbers)
        {
            string sortedDigits = new string(str.OrderBy(c => c).ToArray());
          
            if(dict.TryAdd(sortedDigits, groups.Count()))
            {
                groups.Add(new List<string> {str});
            }
            else
            {
                groups[dict[sortedDigits]].Add(str);
            }
        }
​
        groups = groups.Where(x => x.Count() > 1).ToList();
        groups = groups.Select(x => x.OrderBy(y => y).ToList()).ToList();
      
        int gc = groups.Count();
        BigInteger[] result = new BigInteger[groups.Count()];
      
        for (int i = 0; i < gc; i++)
        {
            result[i] = BigInteger.Parse(groups[i][0]);
        }
      
        BigInteger sum = 0;
        foreach(BigInteger bi in result)
        {
            sum += bi;
        }
        return sum.ToString().Sum(c => c - '0');
    }
}